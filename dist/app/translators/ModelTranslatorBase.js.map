{"version":3,"sources":["app/translators/ModelTranslatorBase.ts"],"names":[],"mappings":";;AAIA;IASC;QACC,IAAI,CAAC,gBAAgB,GAAG,IAAI,CAAC;QAC7B,IAAI,CAAC,SAAS,EAAE,CAAC;IAClB,CAAC;IAQD;;;;;;;;OAQG;IACI,OAAO,CAAC,MAAW,EAAE,MAAe,EAAE,aAA8C;QAC1F,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,SAAS,CAAC,OAAO,EAAE,MAAM,EAAE,MAAM,EAAE,aAAa,CAAC,CAAC;IAC9E,CAAC;IAED;;;;;;;;OAQG;IACI,KAAK,CAAC,MAAW,EAAE,MAAe,EAAE,aAA8C;QACxF,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,SAAS,CAAC,KAAK,EAAE,MAAM,EAAE,MAAM,EAAE,aAAa,CAAC,CAAC;IAC5E,CAAC;IAcO,SAAS,CAAC,EAAY,EAAE,MAAW,EAAE,MAAe,EAAE,aAA8C;QAC3G,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC,CAAC;YAC5B,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;QACzB,CAAC;QAED,IAAI,CAAC,KAAK,EAAE,KAAK,CAAC,GAAG,EAAE,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE,MAAM,EAAE,EAAE,MAAM,EAAE,CAAC,CAAC;QACjE,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;YACX,EAAE,CAAC,CAAC,CAAC,aAAa,CAAC,CAAC,CAAC;gBACpB,MAAM,KAAK,CAAC;YACb,CAAC;YACD,aAAa,CAAC,KAAK,CAAC,CAAC;QACtB,CAAC;QAED,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;IACxB,CAAC;CAED;AA1ED,kDA0EC","file":"ModelTranslatorBase.js","sourcesContent":["import { ModelValidatorBase } from '../validators/ModelValidatorBase';\r\nimport { ValidationError } from '../validators/ValidationError';\r\n\r\n\r\nexport abstract class ModelTranslatorBase<T> {\r\n\r\n\t/**\r\n\t * Turns on or off model validation before translating.\r\n\t * Default to `true`.\r\n\t */\r\n\tpublic enableValidation: boolean;\r\n\r\n\r\n\tconstructor() {\r\n\t\tthis.enableValidation = true;\r\n\t\tthis.createMap();\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Gets validator for specific type <T>.\r\n\t */\r\n\tprotected abstract get validator(): ModelValidatorBase<T>;\r\n\r\n\t/**\r\n\t * Validates then converts an object to type <T>. \r\n\t * but ONLY properties with value are validated and copied.\r\n\t * @param {any} source\r\n\t * @param {boolean} isEdit If `true`, validates model ID. Otherwise, excludes model ID from validation. Only takes effect when `enableValidation` is `true`.\r\n\t * @param {Function} errorCallback If specified, gives validation error to this callback. Otherwise, throw error.\r\n\t * \r\n\t * @throws {ValidationError} If no `errorCallback` is provided.\r\n\t */\r\n\tpublic partial(source: any, isEdit: boolean, errorCallback?: (err: ValidationError) => void): Partial<T> {\r\n\t\treturn this.translate(this.validator.partial, source, isEdit, errorCallback);\r\n\t}\r\n\r\n\t/**\r\n\t * Validates then converts an object to type <T>. \r\n\t * ALL properties are validated and copied regardless with or without value.\r\n\t * @param {any} source\r\n\t * @param {boolean} isEdit If `true`, validates model ID. Otherwise, excludes model ID from validation. Only takes effect when `enableValidation` is `true`.\r\n\t * @param {Function} errorCallback If specified, gives validation error to this callback. Otherwise, throw error.\r\n\t * \r\n\t * @throws {ValidationError} If no `errorCallback` is provided.\r\n\t */\r\n\tpublic whole(source: any, isEdit: boolean, errorCallback?: (err: ValidationError) => void): T {\r\n\t\treturn this.translate(this.validator.whole, source, isEdit, errorCallback);\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Initializes the model mapping engine.\r\n\t */\r\n\tprotected abstract createMap(): void;\r\n\t\r\n\t/**\r\n\t * Is invoked after source object is validated to map source object to target model.\r\n\t */\r\n\tprotected abstract map(validatedSource: any): T;\r\n\r\n\r\n\tprivate translate(fn: Function, source: any, isEdit: boolean, errorCallback?: (err: ValidationError) => void): T {\r\n\t\tif (!this.enableValidation) {\r\n\t\t\treturn this.map(source);\r\n\t\t}\r\n\r\n\t\tlet [error, model] = fn.call(this.validator, source, { isEdit });\r\n\t\tif (error) {\r\n\t\t\tif (!errorCallback) {\r\n\t\t\t\tthrow error;\r\n\t\t\t}\r\n\t\t\terrorCallback(error);\r\n\t\t}\r\n\r\n\t\treturn this.map(model);\r\n\t}\r\n\r\n}\r\n"]}