{"version":3,"sources":["app/validators/GetSettingRequestValidator.ts"],"names":[],"mappings":";;AAAA,2BAA2B;AAC3B,+DAA+D;AAI/D,6DAA6E;AAG7E,gCACC,SAAQ,uCAAqC;IAQ7C;QACC,KAAK,EAAE,CAAC;QAPU,eAAU,GAAG;YAC/B,IAAI,EAAE,GAAG,CAAC,MAAM,EAAE,CAAC,KAAK,CAAC,iBAAiB,CAAC,CAAC,QAAQ,EAAE,CAAC,OAAO,CAAC,YAAY,CAAC,CAAC,OAAO,CAAC,aAAa,CAAC;YACnG,SAAS,EAAE,GAAG,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE,CAAC,QAAQ,EAAE,CAAC,OAAO,CAAC,WAAW,CAAC,CAAC,OAAO,CAAC,eAAe,CAAC;SACrF,CAAC;QAKD,IAAI,CAAC,OAAO,EAAE,CAAC;IAChB,CAAC;IAGD;;;;OAIG;IACI,OAAO,CAAC,MAAW,EAAE,UAA6B,EAAE;QAC1D,MAAM,IAAI,8CAAuB,CAAC,oDAAoD,CAAC,CAAC;IACzF,CAAC;CACD;AAvBD,gEAuBC;AAED,kBAAe,IAAI,0BAA0B,EAAE,CAAC","file":"GetSettingRequestValidator.js","sourcesContent":["import * as joi from 'joi';\r\nimport { NotImplementedException } from 'back-lib-common-util';\r\n\r\nimport { GetSettingRequest } from '../models/GetSettingRequest';\r\nimport { ValidationError } from './ValidationError';\r\nimport { ModelValidatorBase, ValidationOptions } from './ModelValidatorBase';\r\n\r\n\r\nexport class GetSettingRequestValidator\r\n\textends ModelValidatorBase<GetSettingRequest> {\r\n\t\r\n\tprotected readonly _schemaMap = {\r\n\t\tslug: joi.string().regex(/^[0-9a-zA-z-]+$/).required().example('SettingSvc').example('setting-svc'),\r\n\t\tipAddress: joi.string().ip().required().example('127.0.0.1').example('192.168.10.23')\r\n\t};\r\n\r\n\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.compile();\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * This method is unnecessary. Use `whole` instead.\r\n\t * @override\r\n\t * @throws NotImplementedException\r\n\t */\r\n\tpublic partial(target: any, options: ValidationOptions = {}): [ValidationError, GetSettingRequest] {\r\n\t\tthrow new NotImplementedException('This method is not supported. Use `whole` instead.');\r\n\t}\r\n}\r\n\r\nexport default new GetSettingRequestValidator();"]}