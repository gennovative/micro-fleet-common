{"version":3,"sources":["app/validators/ModelValidatorBase.ts"],"names":[],"mappings":";;AAAA,2BAA2B;AAE3B,uDAA0E;AAK1E;IAOC;QACC,IAAI,CAAC,SAAS,GAAG,GAAG,CAAC,MAAM,EAAE,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,QAAQ,EAAE,CAAC;IACzD,CAAC;IAGD;;OAEG;IACH,IAAW,MAAM;QAChB,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC;IACrB,CAAC;IAED;;;;;OAKG;IACH,IAAW,QAAQ;QAClB,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC;IACvB,CAAC;IAED;;OAEG;IACI,KAAK,CAAC,EAAO;QACnB,IAAG,EAAE,KAAK,EAAE,KAAK,EAAE,GAAG,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC;QACjD,MAAM,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,KAAK,EAAE,IAAI,CAAC,GAAG,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;IAChD,CAAC;IAED;;OAEG;IACI,MAAM,CAAC,MAAW,EAAE,UAA6B,EAAE;QACzD,IAAI,IAAI,GAAG,MAAM,CAAC,MAAM,CAAC,OAAO,EAAE;YAChC,UAAU,EAAE,KAAK;YACjB,YAAY,EAAE,IAAI;YAClB,YAAY,EAAE,IAAI;SAClB,CAAC,CAAC;QAEJ,IAAG,EAAE,KAAK,EAAE,KAAK,EAAE,GAAG,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAI,MAAM,EAAE,IAAI,CAAC,CAAC;QAE5D,MAAM,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,IAAI,iCAAe,CAAC,KAAK,CAAC,OAAO,CAAC,EAAE,IAAI,CAAC,GAAG,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;IAC7E,CAAC;IAED;;OAEG;IACI,OAAO,CAAC,MAAW,EAAE,UAA6B,EAAE;QAC1D,IAAI,IAAI,GAAG,MAAM,CAAC,MAAM,CAAC,OAAO,EAAE;YAChC,UAAU,EAAE,KAAK;YACjB,YAAY,EAAE,IAAI;YAClB,YAAY,EAAE,IAAI;SAClB,CAAC,CAAC;QAEJ,IAAG,EAAE,KAAK,EAAE,KAAK,EAAE,GAAG,IAAI,CAAC,MAAM;aAC/B,IAAI,CAAC,EAAE,EAAE,EAAE,IAAI,CAAC,QAAQ,EAAE,CAAC;aAC3B,QAAQ,CAAI,MAAM,EAAE,IAAI,CAAC,CAAC;QAE5B,MAAM,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,IAAI,iCAAe,CAAC,KAAK,CAAC,OAAO,CAAC,EAAE,IAAI,CAAC,GAAG,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;IAC7E,CAAC;CACD;AApED,gDAoEC","file":"ModelValidatorBase.js","sourcesContent":["import * as joi from 'joi';\r\n\r\nimport { ValidationError, IValidationErrorItem } from './ValidationError';\r\n\r\n\r\nexport type ValidationOptions = joi.ValidationOptions;\r\n\r\nexport abstract class ModelValidatorBase<T> {\r\n\r\n\tprotected abstract readonly _schema: joi.ObjectSchema;\r\n\r\n\tprivate readonly _schemaId: joi.StringSchema;\r\n\r\n\r\n\tconstructor() {\r\n\t\tthis._schemaId = joi.string().regex(/^\\d+$/).required();\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Gets schema used for validation the model.\r\n\t */\r\n\tpublic get schema(): joi.ObjectSchema {\r\n\t\treturn this._schema;\r\n\t}\r\n\r\n\t/**\r\n\t * Gets schema used for validation the model ID.\r\n\t * By default, all model IDs are of type `BigSInt` (string).\r\n\t * If a derived validator wants to support a model with ID of different type,\r\n\t * it must override this getter method.\r\n\t */\r\n\tpublic get schemaId(): any {\r\n\t\treturn this._schemaId;\r\n\t}\r\n\r\n\t/**\r\n\t * Validates model ID.\r\n\t */\r\n\tpublic forId(id: any): [ValidationError, BigSInt] {\r\n\t\tlet{ error, value } = this.schemaId.validate(id);\r\n\t\treturn (error) ? [error, null] : [null, value];\r\n\t}\r\n\r\n\t/**\r\n\t * Validates model for creation operation, which doesn't need `id` property.\r\n\t */\r\n\tpublic forNew(target: any, options: ValidationOptions = {}): [ValidationError, T] {\r\n\t\tlet opts = Object.assign(options, {\r\n\t\t\t\tabortEarly: false,\r\n\t\t\t\tallowUnknown: true,\r\n\t\t\t\tstripUnknown: true\r\n\t\t\t});\r\n\r\n\t\tlet{ error, value } = this.schema.validate<T>(target, opts);\r\n\r\n\t\treturn (error) ? [new ValidationError(error.details), null] : [null, value];\r\n\t}\r\n\r\n\t/**\r\n\t * Validates model for modification operation, which requires `id` property.\r\n\t */\r\n\tpublic forEdit(target: any, options: ValidationOptions = {}): [ValidationError, T] {\r\n\t\tlet opts = Object.assign(options, {\r\n\t\t\t\tabortEarly: false,\r\n\t\t\t\tallowUnknown: true,\r\n\t\t\t\tstripUnknown: true\r\n\t\t\t});\r\n\r\n\t\tlet{ error, value } = this.schema\r\n\t\t\t.keys({ id: this.schemaId })\r\n\t\t\t.validate<T>(target, opts);\r\n\r\n\t\treturn (error) ? [new ValidationError(error.details), null] : [null, value];\r\n\t}\r\n}"]}