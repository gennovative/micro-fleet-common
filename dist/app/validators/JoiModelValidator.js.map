{"version":3,"sources":["app/validators/JoiModelValidator.ts"],"names":[],"mappings":"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","file":"JoiModelValidator.js","sourcesContent":["import * as joi from 'joi';\r\nimport { Guard } from '@micro-fleet/common-util';\r\n\r\nimport { ValidationError } from './ValidationError';\r\n\r\n\r\nexport interface ValidationOptions extends joi.ValidationOptions {\r\n}\r\n\r\nexport class JoiModelValidator<T> {\r\n\r\n\t/**\r\n\t * Builds a new instance of ModelValidatorBase.\r\n\t * @param {joi.SchemaMap} schemaMapModel Rules to validate model properties.\r\n\t * @param {boolean} isCompoundPk Whether the primary key is compound. Default to `false`.\r\n\t * \tThis param is IGNORED if param `schemaMapPk` has value.\r\n\t * @param {boolean} requirePk Whether to validate PK.\r\n\t * \tThis param is IGNORED if param `schemaMapPk` has value.\r\n\t * \tDefault to be `false`.\r\n\t * @param {joi.SchemaMap} schemaMapPk Rule to validate model PK.\r\n\t */\r\n\tpublic static create<T>(schemaMapModel: joi.SchemaMap, isCompoundPk: boolean = false, requirePk: boolean = false, schemaMapPk?: joi.SchemaMap): JoiModelValidator<T> {\r\n\t\tlet validator = new JoiModelValidator<T>(schemaMapModel, isCompoundPk, requirePk, schemaMapPk);\r\n\t\tvalidator.compile();\r\n\t\treturn validator;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Compiled rules for compound model primary key.\r\n\t */\r\n\tprotected _compiledPk: joi.ObjectSchema;\r\n\r\n\t/**\r\n\t * Compiled rules for model properties.\r\n\t */\r\n\tprotected _compiledWhole: joi.ObjectSchema;\r\n\r\n\t/**\r\n\t * Compiled rules for model properties, but all of them are OPTIONAL.\r\n\t * Used for patch operation.\r\n\t */\r\n\tprotected _compiledPartial: joi.ObjectSchema;\r\n\r\n\r\n\t/**\r\n\t * @param {joi.SchemaMap} _schemaMap Rules to validate model properties.\r\n\t * @param {boolean} _isCompositePk Whether the primary key is compound. Default to `false`\r\n\t * \tThis param is IGNORED if param `schemaMapPk` has value.\r\n\t * @param {boolean} requirePk Whether to validate ID.\r\n\t * \tThis param is IGNORED if param `schemaMapPk` has value.\r\n\t * @param {joi.SchemaMap} _schemaMapId Rule to validate model PK.\r\n\t */\r\n\tprotected constructor(\r\n\t\tprotected _schemaMap: joi.SchemaMap,\r\n\t\tprotected _isCompositePk: boolean = false,\r\n\t\trequirePk: boolean,\r\n\t\tprotected _schemaMapPk?: joi.SchemaMap,\r\n\t) {\r\n\t\t// As default, model ID is a string of 64-bit integer.\r\n\t\t// JS cannot handle 64-bit integer, that's why we must use string.\r\n\t\t// The database will convert to BigInt type when inserting.\r\n\t\tlet idSchema = joi.string().regex(/^\\d+$/);\r\n\t\tif (requirePk) {\r\n\t\t\tidSchema = idSchema.required();\r\n\t\t}\r\n\r\n\t\tif (_schemaMapPk) {\r\n\t\t\tthis._schemaMapPk = _schemaMapPk;\r\n\t\t} else if (_isCompositePk) {\r\n\t\t\t// this._compiledPk = joi.object({\r\n\t\t\t// \t\tid: idSchema,\r\n\t\t\t// \t\ttenantId: idSchema\r\n\t\t\t// \t})\r\n\t\t\t// \t.required();\r\n\t\t\tthis._schemaMapPk = {\r\n\t\t\t\t\tid: idSchema,\r\n\t\t\t\t\ttenantId: idSchema\r\n\t\t\t\t};\r\n\t\t} else {\r\n\t\t\tthis._schemaMapPk = { id: idSchema };\r\n\t\t\tthis._compiledPk = <any>idSchema;\r\n\t\t}\r\n\t}\r\n\r\n\r\n\tpublic get schemaMap(): joi.SchemaMap {\r\n\t\treturn this._schemaMap;\r\n\t}\r\n\r\n\tpublic get schemaMapPk(): joi.SchemaMap {\r\n\t\treturn this._schemaMapPk;\r\n\t}\r\n\r\n\tpublic get isCompoundPk(): boolean {\r\n\t\treturn this._isCompositePk;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Validates model PK.\r\n\t */\r\n\tpublic pk(pk: any): [ValidationError, any] {\r\n\t\tGuard.assertIsDefined(this._compiledPk, 'Must call `compile` before using this function!');\r\n\t\tlet { error, value } = this._compiledPk.validate<any>(pk);\r\n\t\treturn (error) ? [new ValidationError(error.details), null] : [null, value];\r\n\t}\r\n\r\n\t/**\r\n\t * Validates model for creation operation, which doesn't need `pk` property.\r\n\t */\r\n\tpublic whole(target: any, options: ValidationOptions = {}): [ValidationError, T] {\r\n\t\treturn this.validate(this._compiledWhole, target, options);\r\n\t}\r\n\r\n\t/**\r\n\t * Validates model for modification operation, which requires `pk` property.\r\n\t */\r\n\tpublic partial(target: any, options: ValidationOptions = {}): [ValidationError, Partial<T>] {\r\n\t\treturn this.validate(this._compiledPartial, target, options);\r\n\t}\r\n\r\n\t/**\r\n\t * Must call this method before using `whole` or `partial`,\r\n\t * or after `schemaMap` or `schemaMapId` is changed.\r\n\t */\r\n\tpublic compile(): void {\r\n\r\n\t\tif (!this._compiledPk) {\r\n\t\t\tif (this._isCompositePk) {\r\n\t\t\t\tthis._compiledPk = joi.object(this._schemaMapPk);\r\n\t\t\t} else {\r\n\t\t\t\t// Compile rule for simple PK with only one property\r\n\t\t\t\tlet idMap = this.schemaMapPk;\r\n\t\t\t\tfor (let key in idMap) {\r\n\t\t\t\t\t/* istanbul ignore else */\r\n\t\t\t\t\tif (idMap.hasOwnProperty(key)) {\r\n\t\t\t\t\t\tthis._compiledPk = idMap[key] as joi.ObjectSchema;\r\n\t\t\t\t\t\tbreak; // Only get the first rule\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tlet wholeSchema = this._schemaMap;\r\n\t\tthis._compiledWhole = joi.object(wholeSchema);\r\n\r\n\t\t// Make all rules optional for partial schema.\r\n\t\tlet partialSchema: joi.SchemaMap = {};\r\n\t\tfor (let key in wholeSchema) {\r\n\t\t\t/* istanbul ignore else */\r\n\t\t\tif (wholeSchema.hasOwnProperty(key)) {\r\n\t\t\t\tlet rule = wholeSchema[key] as joi.Schema;\r\n\t\t\t\t/* istanbul ignore else */\r\n\t\t\t\tif (typeof rule.optional === 'function') {\r\n\t\t\t\t\tpartialSchema[key] = rule.optional();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tthis._compiledPartial = joi.object(partialSchema);\r\n\r\n\t\tthis._compiledWhole = this._compiledWhole.keys(this._schemaMapPk);\r\n\t\tthis._compiledPartial = this._compiledPartial.keys(this._schemaMapPk);\r\n\t}\r\n\r\n\tprotected validate(schema: joi.ObjectSchema, target: any, options: ValidationOptions = {}): [ValidationError, T] {\r\n\t\tGuard.assertIsDefined(schema, 'Must call `compile` before using this function!');\r\n\r\n\t\tlet opts = Object.assign({\r\n\t\t\t\tabortEarly: false,\r\n\t\t\t\tallowUnknown: true,\r\n\t\t\t\tstripUnknown: true\r\n\t\t\t}, options);\r\n\r\n\t\tlet { error, value } = schema.validate<T>(target, opts);\r\n\r\n\t\treturn (error) ? [new ValidationError(error.details), null] : [null, value];\r\n\t}\r\n}"]}